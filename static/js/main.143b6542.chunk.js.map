{"version":3,"sources":["components/Button.js","components/Counter/Counter.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","type","className","color","onClick","handleClick","title","Counter","state","isShown","counter","add","setState","prevState","hide","console","log","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qRAEMA,EAAS,SAACC,GACd,OACE,4BACEC,KAAK,SACLC,UAAS,kBAAaF,EAAMG,MAAnB,QACTC,QAASJ,EAAMK,aAEdL,EAAMM,QCNPC,E,4MACJC,MAAQ,CACNC,SAAS,EACTC,QAAS,G,EAGXC,IAAM,WACJ,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BH,QAASG,EAAUH,QAAU,MAG/B,oC,EAGFI,KAAO,WACL,EAAKF,SAAS,CAAEH,SAAS,K,0DAGd,WACXM,QAAQC,IAAI,EAAKR,U,uDAIjB,OAAOS,KAAKT,MAAMC,QAChB,6BACE,2CAAiBQ,KAAKT,MAAME,SAC5B,kBAAC,EAAD,CACEL,YAAaY,KAAKN,IAClBL,MAAO,MACPH,MAAO,YAET,kBAAC,EAAD,CACEE,YAAaY,KAAKH,KAClBR,MAAO,IACPH,MAAO,WAET,8BAEE,yC,GAtCYe,IAAMC,W,2BCWbC,MAVf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.143b6542.chunk.js","sourcesContent":["import React from 'react';\n\nconst Button = (props) => {\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${props.color} m-2`}\n      onClick={props.handleClick}\n    >\n      {props.title}\n    </button>\n  );\n};\n\nexport { Button };\n","import React from 'react';\nimport { Button } from '../Button';\n\nclass Counter extends React.Component {\n  state = {\n    isShown: true,\n    counter: 1,\n  }\n\n  add = () => {\n    this.setState(prevState => ({\n      counter: prevState.counter + 1,\n    }))\n\n    this.#showState();\n  }\n\n  hide = () => {\n    this.setState({ isShown: false });\n  }\n\n  #showState = () => {\n    console.log(this.state);\n  }\n\n  render() {\n    return this.state.isShown ? (\n      <div>\n        <span>Counter = {this.state.counter}</span>\n        <Button\n          handleClick={this.add}\n          title={'Add'}\n          color={'success'}\n        />\n        <Button\n          handleClick={this.hide}\n          title={'X'}\n          color={'danger'}\n        />\n        <hr />\n        </div>\n      ) : <></>\n  }\n}\n\nexport { Counter };\n","import React from 'react';\nimport './App.css';\nimport { Counter } from './components/Counter/Counter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n      <Counter />\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}